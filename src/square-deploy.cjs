// square-deploy.cjs
const squareCloud = require('@squarecloud/api');

// Verifica√ß√£o detalhada da importa√ß√£o
console.log('[1/7] Verificando importa√ß√£o do pacote...');
if (!squareCloud) {
  throw new Error('Pacote @squarecloud/api n√£o foi importado corretamente');
}

// Extra√ß√£o do construtor com fallbacks
const SquareCloudAPI = squareCloud.SquareCloudAPI || squareCloud.default?.SquareCloudAPI || squareCloud;
if (!SquareCloudAPI) {
  throw new Error('N√£o foi poss√≠vel encontrar o construtor SquareCloudAPI');
}

async function deploy() {
  try {
    console.log('[2/7] Verificando vari√°veis de ambiente...');
    if (!process.env.SQUARE_API_KEY || !process.env.API_ID_KEY) {
      throw new Error('Vari√°veis SQUARE_API_KEY e API_ID_KEY s√£o obrigat√≥rias');
    }

    console.log('[3/7] Criando inst√¢ncia da API...');
    const api = new SquareCloudAPI(process.env.SQUARE_API_KEY);
    if (!api) {
      throw new Error('Falha ao criar inst√¢ncia da API');
    }

    console.log('[4/7] Obtendo aplica√ß√£o...');
    const app = await api.applications.get(process.env.API_ID_KEY);
    if (!app) {
      throw new Error('Falha ao obter aplica√ß√£o');
    }

    console.log('[5/7] Parando aplica√ß√£o...');
    const stopped = await app.stop();
    if (!stopped) {
      throw new Error('Falha ao parar aplica√ß√£o');
    }

    console.log('[6/7] Preparando upload...');
    const path = require('path');
    const fs = require('fs');
    const filePath = path.join(__dirname, 'app.zip');
    
    if (!fs.existsSync(filePath)) {
      throw new Error(`Arquivo app.zip n√£o encontrado em ${filePath}`);
    }

    console.log('[7/7] Realizando upload...');
    const success = await app.commit(filePath, 'app.zip');
    if (!success) {
      throw new Error('Upload falhou');
    }

    console.log('‚úÖ Reiniciando aplica√ß√£o...');
    await app.start();
    console.log('üöÄ Deploy conclu√≠do com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Falha cr√≠tica:', error.message);
    if (error.response) {
      console.error('Detalhes do erro:', {
        status: error.response.status,
        data: error.response.data
      });
    }
    process.exit(1);
  }
}

deploy();